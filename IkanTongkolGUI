-- IkanTongkol.lua
-- Full-featured lightweight UI library (Rayfield-like API)
-- Features: CreateWindow, CreateTab, Toggle, Slider, Button, Dropdown, Input, Keybind,
-- Notification, Save/Load (flag), responsive + smooth Tween animations.

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer

local IkanTongkol = {}
IkanTongkol.__index = IkanTongkol

-- ----------------------
-- Utilities
-- ----------------------
local function new(class, props, parent)
    local inst = Instance.new(class)
    if props then
        for k, v in pairs(props) do
            inst[k] = v
        end
    end
    if parent then inst.Parent = parent end
    return inst
end

local function tween(inst, props, time, style, dir)
    time = time or 0.22
    style = style or Enum.EasingStyle.Quad
    dir = dir or Enum.EasingDirection.Out
    local t = TweenService:Create(inst, TweenInfo.new(time, style, dir), props)
    t:Play()
    return t
end

local function clamp(v, a, b) return math.max(a, math.min(b, v)) end

-- Simple persistent store (per player)
local function getStoreFolder()
    local pg = LocalPlayer:FindFirstChild("PlayerGui") or LocalPlayer:WaitForChild("PlayerGui")
    local folder = pg:FindFirstChild("IkanTongkolStore")
    if not folder then
        folder = Instance.new("Folder")
        folder.Name = "IkanTongkolStore"
        folder.Parent = pg
    end
    return folder
end

local function saveFlag(flag, value)
    local folder = getStoreFolder()
    local key = folder:FindFirstChild(flag)
    if not key then
        key = Instance.new("StringValue")
        key.Name = flag
        key.Parent = folder
    end
    key.Value = HttpService:JSONEncode(value)
end

local function loadFlag(flag)
    local folder = getStoreFolder()
    local key = folder:FindFirstChild(flag)
    if not key then return nil end
    local ok, val = pcall(HttpService.JSONDecode, HttpService, key.Value)
    if ok then return val else return nil end
end

-- ----------------------
-- Window
-- ----------------------
function IkanTongkol:CreateWindow(cfg)
    cfg = cfg or {}
    local self = setmetatable({}, IkanTongkol)

    local gui = new("ScreenGui", {
        Name = cfg.Name or "IkanTongkolUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    }, LocalPlayer:WaitForChild("PlayerGui"))

    -- Main container: responsive size (scale-based)
    local main = new("Frame", {
        Name = "Main",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = cfg.Size or UDim2.new(0.36, 0, 0.56, 0), -- scale by default
        BackgroundColor3 = cfg.BackgroundColor or Color3.fromRGB(28, 28, 30),
        BorderSizePixel = 0,
    }, gui)
    new("UICorner", { CornerRadius = UDim.new(0, 12) }, main)
    new("UIStroke", { Color = Color3.fromRGB(50,50,56), Thickness = 1 }, main)

    -- Topbar
    local top = new("Frame", {
        Name = "Topbar",
        Size = UDim2.new(1, 0, 0, 44),
        BackgroundTransparency = 0,
        BackgroundColor3 = Color3.fromRGB(34,34,36),
    }, main)
    new("UICorner", { CornerRadius = UDim.new(0, 12) }, top)

    local title = new("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 8),
        Size = UDim2.new(1, -80, 0, 28),
        Text = cfg.Title or (cfg.Name or "Ikan Tongkol"),
        TextColor3 = Color3.fromRGB(235,235,240),
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, top)

    local closeBtn = new("TextButton", {
        Name = "Close",
        BackgroundTransparency = 0.6,
        Size = UDim2.new(0, 36, 0, 28),
        Position = UDim2.new(1, -46, 0, 8),
        Text = "âœ•",
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(240,80,80),
        AutoButtonColor = false,
    }, top)
    new("UICorner", { CornerRadius = UDim.new(0,8) }, closeBtn)

    closeBtn.MouseEnter:Connect(function() tween(closeBtn, {BackgroundTransparency = 0.2}, 0.16) end)
    closeBtn.MouseLeave:Connect(function() tween(closeBtn, {BackgroundTransparency = 0.6}, 0.16) end)
    closeBtn.MouseButton1Click:Connect(function()
        tween(main, {Size = UDim2.new(0,0,0,0)}, 0.22)
        task.delay(0.22, function() gui:Destroy() end)
    end)

    -- Sidebar + Content area
    local sidebar = new("Frame", {
        Name = "Sidebar",
        Position = UDim2.new(0, 0, 0, 44),
        Size = UDim2.new(0, 160, 1, -44),
        BackgroundColor3 = Color3.fromRGB(30,30,32),
    }, main)
    new("UICorner", { CornerRadius = UDim.new(0, 0) }, sidebar)

    local tabsHolder = new("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0,8) }, sidebar)
    new("UIPadding", { PaddingTop = UDim.new(0,8), PaddingLeft = UDim.new(0,8), PaddingRight = UDim.new(0,8) }, sidebar)

    local content = new("Frame", {
        Name = "Content",
        Position = UDim2.new(0, 160, 0, 44),
        Size = UDim2.new(1, -160, 1, -44),
        BackgroundColor3 = Color3.fromRGB(26,26,28),
    }, main)
    new("UICorner", { CornerRadius = UDim.new(0, 0) }, content)

    local pages = new("Folder", { Name = "Pages" }, content)

    -- Make window draggable (topbar)
    do
        local dragging, dragStart, startPos
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = main.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    -- Window object
    self._gui = gui
    self._main = main
    self._sidebar = sidebar
    self._content = content
    self._pages = pages
    self._tabs = {}
    self._activeTab = nil

    -- Notification container (top of content)
    local notifFolder = new("Folder", { Name = "Notifications" }, main)
    self._notifFolder = notifFolder

    -- Public methods
    function self:CreateTab(tabCfg)
        tabCfg = tabCfg or {}
        local tabName = tabCfg.Name or ("Tab"..(#self._tabs+1))

        -- Sidebar button
        local btn = new("TextButton", {
            Text = tabName,
            Size = UDim2.new(1, 0, 0, 34),
            BackgroundColor3 = Color3.fromRGB(28,28,30),
            TextColor3 = Color3.fromRGB(220,220,225),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            AutoButtonColor = false
        }, sidebar)
        new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)
        -- Page
        local page = new("ScrollingFrame", {
            Name = tabName .. "_Page",
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 6,
            Visible = false,
            Parent = pages
        }, pages)
        local list = new("UIListLayout", { Padding = UDim.new(0,8) }, page)
        new("UIPadding", { PaddingTop = UDim.new(0,12), PaddingLeft = UDim.new(0,12), PaddingRight = UDim.new(0,12), PaddingBottom = UDim.new(0,12) }, page)

        -- Resize canvas automatically
        list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0, 0, 0, list.AbsoluteContentSize.Y + 12)
        end)

        -- Tab object
        local tab = {
            _btn = btn,
            _page = page,
            _name = tabName
        }

        -- Activate function
        local function activate()
            for _, p in ipairs(self._pages:GetChildren()) do
                if p:IsA("ScrollingFrame") then p.Visible = false end
            end
            for _, b in ipairs(self._sidebar:GetChildren()) do
                if b:IsA("TextButton") then b.BackgroundColor3 = Color3.fromRGB(28,28,30) end
            end
            page.Visible = true
            tween(btn, {BackgroundColor3 = Color3.fromRGB(34,34,36)}, 0.16)
            self._activeTab = tab
        end
        btn.MouseButton1Click:Connect(activate)

        -- default activate first tab
        if #self._tabs == 0 then
            activate()
        end

        -- ----- Component builders (table-style API) -----
        function tab:CreateSection(name)
            name = name or "Section"
            local sec = new("Frame", { Size = UDim2.new(1,0,0,30), BackgroundTransparency = 1 }, page)
            local label = new("TextLabel", {
                Text = name,
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(220,220,225),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Size = UDim2.new(1,0,1,0)
            }, sec)
            return sec
        end

        function tab:CreateButton(opts)
            opts = opts or {}
            local container = new("Frame", { Size = UDim2.new(1,0,0,34), BackgroundTransparency = 1 }, page)
            local btn = new("TextButton", {
                Text = opts.Name or "Button",
                Size = UDim2.new(1,0,0,32),
                BackgroundColor3 = Color3.fromRGB(46,46,48),
                TextColor3 = Color3.fromRGB(235,235,240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)
            btn.MouseEnter:Connect(function() tween(btn, {BackgroundColor3 = Color3.fromRGB(62,62,64)}, 0.14) end)
            btn.MouseLeave:Connect(function() tween(btn, {BackgroundColor3 = Color3.fromRGB(46,46,48)}, 0.14) end)
            btn.MouseButton1Click:Connect(function()
                pcall(opts.Callback)
            end)
            return btn
        end

        function tab:CreateToggle(opts)
            opts = opts or {}
            local flag = opts.Flag
            local default = opts.CurrentValue
            if flag then
                local saved = loadFlag(flag)
                if saved ~= nil then default = saved end
            end

            local container = new("Frame", { Size = UDim2.new(1,0,0,34), BackgroundTransparency = 1 }, page)
            local btn = new("TextButton", {
                Text = (default and "âœ… " or "ðŸ”˜ ") .. (opts.Name or "Toggle"),
                Size = UDim2.new(1,0,0,32),
                BackgroundColor3 = Color3.fromRGB(46,46,48),
                TextColor3 = Color3.fromRGB(235,235,240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)

            local state = default or false
            btn.MouseButton1Click:Connect(function()
                state = not state
                btn.Text = (state and "âœ… " or "ðŸ”˜ ") .. (opts.Name or "Toggle")
                if opts.Callback then
                    pcall(opts.Callback, state)
                end
                if flag then saveFlag(flag, state) end
            end)
            return btn
        end

        function tab:CreateSlider(opts)
            opts = opts or {}
            local flag = opts.Flag
            local range = opts.Range or {0,100}
            local min, max = range[1], range[2]
            local value = opts.CurrentValue or min
            if flag then
                local saved = loadFlag(flag)
                if type(saved) == "number" then value = saved end
            end

            local container = new("Frame", { Size = UDim2.new(1,0,0,48), BackgroundTransparency = 1 }, page)
            local label = new("TextLabel", {
                Text = (opts.Name or "Slider") .. ": " .. tostring(value),
                Size = UDim2.new(1,0,0,18),
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(230,230,235),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = container
            }, container)

            local barBack = new("Frame", {
                Size = UDim2.new(1, -10, 0, 12),
                Position = UDim2.new(0,5,0,26),
                BackgroundColor3 = Color3.fromRGB(68,68,72),
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,6) }, barBack)
            local fill = new("Frame", {
                Size = UDim2.new((value-min)/(max-min), 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(0,170,255),
                Parent = barBack
            }, barBack)
            new("UICorner", { CornerRadius = UDim.new(0,6) }, fill)

            local dragging = false
            barBack.InputBegan:Connect(function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                end
            end)
            UserInputService.InputEnded:Connect(function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            UserInputService.InputChanged:Connect(function(i)
                if dragging and (i.UserInputType == Enum.UserInputType.MouseMovement or i.UserInputType == Enum.UserInputType.Touch) then
                    local absPos = barBack.AbsolutePosition.X
                    local absSize = barBack.AbsoluteSize.X
                    local rel = clamp((i.Position.X - absPos) / absSize, 0, 1)
                    local val = math.floor(min + rel * (max - min) + 0.5)
                    value = clamp(val, min, max)
                    fill.Size = UDim2.new(rel, 0, 1, 0)
                    label.Text = (opts.Name or "Slider") .. ": " .. tostring(value)
                    if opts.Callback then pcall(opts.Callback, value) end
                    if flag then saveFlag(flag, value) end
                end
            end)
            return container
        end

        function tab:CreateDropdown(opts)
            opts = opts or {}
            local flag = opts.Flag
            local choices = opts.Options or {}
            local current = opts.CurrentOption or choices[1]
            if flag then
                local saved = loadFlag(flag)
                if saved ~= nil then current = saved end
            end

            local container = new("Frame", { Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1 }, page)
            local label = new("TextButton", {
                Text = (opts.Name or "Dropdown") .. ": " .. tostring(current),
                Size = UDim2.new(1,0,0,32),
                BackgroundColor3 = Color3.fromRGB(46,46,48),
                TextColor3 = Color3.fromRGB(235,235,240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,8) }, label)

            local menu = new("Frame", {
                Size = UDim2.new(1,0,0,0),
                Position = UDim2.new(0,0,0,36),
                BackgroundColor3 = Color3.fromRGB(38,38,40),
                ClipsDescendants = true,
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,8) }, menu)
            local menuList = new("UIListLayout", { Padding = UDim.new(0,4) }, menu)
            new("UIPadding", { PaddingTop = UDim.new(0,6), PaddingLeft = UDim.new(0,6), PaddingRight = UDim.new(0,6) }, menu)

            local open = false
            label.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    menu.Visible = true
                    tween(menu, {Size = UDim2.new(1,0,0, math.clamp(#choices * 28 + 10, 30, 240))}, 0.18)
                else
                    tween(menu, {Size = UDim2.new(1,0,0,0)}, 0.14)
                    task.delay(0.16, function() if not open then menu.Visible = false end end)
                end
            end)

            for _, choice in ipairs(choices) do
                local it = new("TextButton", {
                    Text = tostring(choice),
                    Size = UDim2.new(1,0,0,26),
                    BackgroundColor3 = Color3.fromRGB(45,45,47),
                    TextColor3 = Color3.fromRGB(230,230,235),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    AutoButtonColor = false,
                    Parent = menu
                }, menu)
                new("UICorner", { CornerRadius = UDim.new(0,6) }, it)
                it.MouseButton1Click:Connect(function()
                    current = choice
                    label.Text = (opts.Name or "Dropdown") .. ": " .. tostring(current)
                    if opts.Callback then pcall(opts.Callback, current) end
                    if flag then saveFlag(flag, current) end
                    open = false
                    tween(menu, {Size = UDim2.new(1,0,0,0)}, 0.14)
                    task.delay(0.16, function() menu.Visible = false end)
                end)
            end
            -- init
            label.Text = (opts.Name or "Dropdown") .. ": " .. tostring(current)
            return container
        end

        function tab:CreateInput(opts)
            opts = opts or {}
            local placeholder = opts.PlaceholderText or ""
            local container = new("Frame", { Size = UDim2.new(1,0,0,46), BackgroundTransparency = 1 }, page)
            local label = new("TextLabel", {
                Text = opts.Name or "Input",
                Size = UDim2.new(1,0,0,18),
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(230,230,235),
                Font = Enum.Font.Gotham,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = container
            }, container)
            local box = new("TextBox", {
                Text = opts.DefaultText or "",
                PlaceholderText = placeholder,
                ClearTextOnFocus = false,
                Size = UDim2.new(1,0,0,24),
                Position = UDim2.new(0,0,0,20),
                BackgroundColor3 = Color3.fromRGB(46,46,48),
                TextColor3 = Color3.fromRGB(235,235,240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,6) }, box)
            box.FocusLost:Connect(function(enter)
                if enter and opts.Callback then pcall(opts.Callback, box.Text) end
            end)
            return container
        end

        function tab:CreateKeybind(opts)
            opts = opts or {}
            local current = opts.DefaultKey or Enum.KeyCode.G
            local container = new("Frame", { Size = UDim2.new(1,0,0,34), BackgroundTransparency = 1 }, page)
            local btn = new("TextButton", {
                Text = (opts.Name or "Keybind") .. ": " .. tostring(current.Name or current),
                Size = UDim2.new(1,0,0,32),
                BackgroundColor3 = Color3.fromRGB(46,46,48),
                TextColor3 = Color3.fromRGB(235,235,240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            }, container)
            new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)

            local listening = false
            btn.MouseButton1Click:Connect(function()
                listening = true
                btn.Text = (opts.Name or "Keybind") .. ": [Press key]"
            end)

            UserInputService.InputBegan:Connect(function(input, gpe)
                if gpe then return end
                if listening and input.KeyCode ~= Enum.KeyCode.Unknown then
                    current = input.KeyCode
                    btn.Text = (opts.Name or "Keybind") .. ": " .. tostring(current.Name)
                    listening = false
                    if opts.Callback then pcall(opts.Callback, current) end
                elseif input.KeyCode == current then
                    if opts.Callback then pcall(opts.Callback, current, true) end
                end
            end)
            return container
        end

        -- finished setup
        table.insert(self._tabs, tab)
        return tab
    end

    function self:Notify(title, text, duration)
        duration = duration or 2.4
        local note = new("Frame", {
            Size = UDim2.new(0, 320, 0, 48),
            Position = UDim2.new(0.5, -160, 0, 12),
            BackgroundColor3 = Color3.fromRGB(36,36,38),
            Parent = self._main
        }, self._main)
        new("UICorner", { CornerRadius = UDim.new(0,8) }, note)
        new("UIStroke", { Color = Color3.fromRGB(60,60,64), Thickness = 1 }, note)
        local t1 = new("TextLabel", {
            Text = title or "Info",
            Size = UDim2.new(1, -12, 0, 20),
            Position = UDim2.new(0, 8, 0, 4),
            BackgroundTransparency = 1,
            Font = Enum.Font.GothamBold,
            TextSize = 14,
            TextColor3 = Color3.fromRGB(235,235,240),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = note
        }, note)
        local t2 = new("TextLabel", {
            Text = text or "",
            Size = UDim2.new(1, -12, 0, 18),
            Position = UDim2.new(0, 8, 0, 22),
            BackgroundTransparency = 1,
            Font = Enum.Font.Gotham,
            TextSize = 13,
            TextColor3 = Color3.fromRGB(200,200,205),
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = note
        }, note)

        note.AnchorPoint = Vector2.new(0.5, 0)
        note.Position = UDim2.new(0.5, -160, 0, -60)
        tween(note, {Position = UDim2.new(0.5, -160, 0, 12), BackgroundTransparency = 0}, 0.22)
        task.delay(duration, function()
            tween(note, {Position = UDim2.new(0.5, -160, 0, -60), BackgroundTransparency = 1}, 0.22)
            task.delay(0.22, function() if note and note.Parent then note:Destroy() end end)
        end)
    end

    return self
end

-- Export
return IkanTongkol
