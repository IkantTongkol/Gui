[{"name":"harta","cf":local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local IkanTongkol = {}
IkanTongkol.__index = IkanTongkol

-- =============== Utilities ===============
local function new(class, props, parent)
    local inst = Instance.new(class)
    if props then
        for k, v in pairs(props) do
            inst[k] = v
        end
    end
    if parent then inst.Parent = parent end
    return inst
end

local function tween(inst, props, time, style, dir)
    time = time or 0.22
    style = style or Enum.EasingStyle.Quad
    dir = dir or Enum.EasingDirection.Out
    local t = TweenService:Create(inst, TweenInfo.new(time, style, dir), props)
    t:Play()
    return t
end

local function clamp(v, a, b)
    return math.max(a, math.min(b, v))
end

local function shallow_copy(t)
    local r = {}
    for i, v in ipairs(t) do
        r[i] = v
    end
    return r
end

-- Persist JSON flags in PlayerGui folder
local function getStoreFolder()
    local pg = LocalPlayer:FindFirstChild("PlayerGui") or LocalPlayer:WaitForChild("PlayerGui")
    local folder = pg:FindFirstChild("IkanTongkolStore")
    if not folder then
        folder = Instance.new("Folder")
        folder.Name = "IkanTongkolStore"
        folder.Parent = pg
    end
    return folder
end

local function saveFlag(flag, value)
    local folder = getStoreFolder()
    local key = folder:FindFirstChild(flag)
    if not key then
        key = Instance.new("StringValue")
        key.Name = flag
        key.Parent = folder
    end
    key.Value = HttpService:JSONEncode(value)
end

local function loadFlag(flag)
    local folder = getStoreFolder()
    local key = folder:FindFirstChild(flag)
    if not key then return nil end
    local ok, val = pcall(HttpService.JSONDecode, HttpService, key.Value)
    if ok then
        return val
    else
        return nil
    end
end

-- FS helpers (executor-dependent)
local function hasfs(name)
    return (typeof(getfenv()[name]) == "function")
end

local function ensureFolder(path)
    if hasfs("isfolder") and hasfs("makefolder") then
        if not isfolder(path) then pcall(makefolder, path) end
        return true
    end
    return false
end

-- =============== Window ===============
function IkanTongkol:CreateWindow(cfg)
    cfg = cfg or {}
    local self = setmetatable({}, IkanTongkol)

    -- top-level ScreenGui
    local gui = new("ScreenGui", {
        Name = cfg.Name or "IkanTongkolUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    }, LocalPlayer:WaitForChild("PlayerGui"))

    local main = new("Frame", {
        Name = "Main",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = cfg.Size or UDim2.new(0.62, 0, 0.82, 0),
        BackgroundColor3 = cfg.BackgroundColor or Color3.fromRGB(28, 28, 30),
        BorderSizePixel = 0,
    }, gui)
    new("UICorner", { CornerRadius = UDim.new(0, 12) }, main)
    new("UIStroke", { Color = Color3.fromRGB(50, 50, 56), Thickness = 1 }, main)

    local top = new("Frame", {
        Name = "Topbar",
        Size = UDim2.new(1, 0, 0, 44),
        BackgroundColor3 = Color3.fromRGB(34, 34, 36),
    }, main)
    new("UICorner", { CornerRadius = UDim.new(0, 12) }, top)

    local title = new("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 8),
        Size = UDim2.new(1, -120, 0, 28),
        Text = cfg.Title or (cfg.Name or "Ikan Tongkol"),
        TextColor3 = Color3.fromRGB(235, 235, 240),
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, top)

    local CloseBtn = new("TextButton", {
        Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -35, 0.5, -15),
        Text = "❌", TextSize = 20, Font = Enum.Font.SourceSansBold,
        TextColor3 = Color3.fromRGB(255, 80, 80), BackgroundTransparency = 1,
        AutoButtonColor = false
    }, top)

    local MinBtn = new("TextButton", {
        Size = UDim2.new(0, 30, 0, 30), Position = UDim2.new(1, -65, 0.5, -15),
        Text = "➖", TextSize = 20, Font = Enum.Font.SourceSansBold,
        TextColor3 = Color3.fromRGB(255, 255, 255), BackgroundTransparency = 1,
        AutoButtonColor = false
    }, top)

    local MiniLogo = new("ImageButton", {
        Size = UDim2.new(0, 55, 0, 55),
        Position = UDim2.new(0, 20, 1, -80),
        Image = "rbxassetid://84063436123273",
        Visible = false, Active = true, Selectable = true
    }, gui)

    local sidebar = new("Frame", {
        Name = "Sidebar",
        Position = UDim2.new(0, 0, 0, 44),
        Size = UDim2.new(0, 160, 1, -44),
        BackgroundColor3 = Color3.fromRGB(30, 30, 32),
    }, main)
    new("UIListLayout", { FillDirection = Enum.FillDirection.Vertical, Padding = UDim.new(0, 8) }, sidebar)
    new("UIPadding", { PaddingTop = UDim.new(0, 8), PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8) }, sidebar)

    local content = new("Frame", {
        Name = "Content",
        Position = UDim2.new(0, 160, 0, 44),
        Size = UDim2.new(1, -160, 1, -44),
        BackgroundColor3 = Color3.fromRGB(26, 26, 28),
    }, main)
    local pages = new("Folder", { Name = "Pages" }, content)

    -- Drag topbar
    do
        local dragging, dragStart, startPos
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = main.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    -- Drag MiniLogo
    do
        local dragging, dragInput, dragStart, startPos
        local function update(input)
            local delta = input.Position - dragStart
            MiniLogo.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
        MiniLogo.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = MiniLogo.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then dragging = false end
                end)
            end
        end)
        MiniLogo.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then dragInput = input end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then update(input) end
        end)
    end

    MinBtn.MouseButton1Click:Connect(function()
        main.Visible = false
        MiniLogo.Visible = true
    end)
    CloseBtn.MouseButton1Click:Connect(function()
        main.Visible = false
        MiniLogo.Visible = false
    end)
    MiniLogo.MouseButton1Click:Connect(function()
        main.Visible = true
        MiniLogo.Visible = false
    end)

    -- Notifications (toast)
    function self:Notify(titleText, bodyText, duration)
        duration = duration or 2.4
        local note = new("Frame", {
            Name = "Note",
            Size = UDim2.new(0, 320, 0, 52),
            Position = UDim2.new(0.5, -160, 0, -60),
            BackgroundColor3 = Color3.fromRGB(36, 36, 38),
            ZIndex = 100,
            Parent = self._main
        })
        new("UICorner", { CornerRadius = UDim.new(0, 8) }, note)
        new("UIStroke", { Color = Color3.fromRGB(60, 60, 64), Thickness = 1 }, note)
        new("TextLabel", {
            Text = titleText or "Info",
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(235, 235, 240),
            Font = Enum.Font.GothamBold,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Size = UDim2.new(1, -14, 0, 22),
            Position = UDim2.new(0, 10, 0, 4),
            ZIndex = 101,
            Parent = note
        })
        new("TextLabel", {
            Text = bodyText or "",
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(200, 200, 205),
            Font = Enum.Font.Gotham,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            Size = UDim2.new(1, -14, 0, 20),
            Position = UDim2.new(0, 10, 0, 24),
            ZIndex = 101,
            Parent = note
        })
        tween(note, { Position = UDim2.new(0.5, -160, 0, 12) }, 0.22)
        task.delay(duration, function()
            tween(note, { Position = UDim2.new(0.5, -160, 0, -60), BackgroundTransparency = 1 }, 0.22)
            task.delay(0.22, function()
                if note and note.Parent then note:Destroy() end
            end)
        end)
    end

    -- ====== Save/Load Flags to .Tgkl ======
    function self:SaveFlagsToFile(name)
        name = tostring(name or "Config")
        if not name:lower():match("%.tgkl$") then name = name .. ".Tgkl" end
        local folder = "IkanTongkol"
        if not ensureFolder(folder) then
            self:Notify("Save Failed", "Executor tidak mendukung filesystem.", 2.5)
            return false
        end
        local data = {}
        for _, sv in ipairs(getStoreFolder():GetChildren()) do
            if sv:IsA("StringValue") then
                local ok, val = pcall(HttpService.JSONDecode, HttpService, sv.Value)
                data[sv.Name] = ok and val or sv.Value
            end
        end
        local json = HttpService:JSONEncode(data)
        local path = folder .. "/" .. name
        local ok, err = pcall(function() writefile(path, json) end)
        if ok then
            self:Notify("Saved", "Tersimpan: " .. path, 2.8)
            return true
        else
            self:Notify("Save Failed", tostring(err), 3.0)
            return false
        end
    end

    function self:LoadFlagsFromFile(name)
        name = tostring(name or "Config")
        if not name:lower():match("%.tgkl$") then name = name .. ".Tgkl" end
        if not (hasfs("isfile") and hasfs("readfile")) then
            self:Notify("Load Failed", "Executor tidak mendukung filesystem.", 2.5)
            return false
        end
        local path = "IkanTongkol/" .. name
        if not isfile(path) then
            self:Notify("Load Failed", "File tidak ditemukan: " .. path, 2.5)
            return false
        end
        local ok, decoded = pcall(function() return HttpService:JSONDecode(readfile(path)) end)
        if not ok or type(decoded) ~= "table" then
            self:Notify("Load Failed", "Format file tidak valid.", 2.5)
            return false
        end
        for k, v in pairs(decoded) do saveFlag(k, v) end
        self:Notify("Loaded", "Dari: " .. path, 2.6)
        return decoded
    end

    -- ===== Cache window refs =====
    self._gui = gui
    self._main = main
    self._top = top
    self._sidebar = sidebar
    self._content = content
    self._pages = pages
    self._tabs = {}
    self._activeTab = nil
    self._logo = MiniLogo
    -- maintain a counter for layout ordering (optional)
    self._orderCounter = 0

    -- =============== Tabs & Controls ===============
    function self:CreateTab(tabCfg)
        tabCfg = tabCfg or {}
        local tabName = tabCfg.Name or ("Tab" .. (#self._tabs + 1))

        local btn = new("TextButton", {
            Text = tabName,
            Size = UDim2.new(1, 0, 0, 34),
            BackgroundColor3 = Color3.fromRGB(28, 28, 30),
            TextColor3 = Color3.fromRGB(220, 220, 225),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            AutoButtonColor = false
        }, sidebar)
        new("UICorner", { CornerRadius = UDim.new(0, 8) }, btn)

        local page = new("ScrollingFrame", {
            Name = tabName .. "_Page",
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 6,
            Visible = false,
            Parent = pages
        })
        local list = new("UIListLayout", { Padding = UDim.new(0, 8) }, page)
        new("UIPadding", { PaddingTop = UDim.new(0, 12), PaddingLeft = UDim.new(0, 12), PaddingRight = UDim.new(0, 12), PaddingBottom = UDim.new(0, 12) }, page)
        list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0, 0, 0, list.AbsoluteContentSize.Y + 12)
        end)

        local tab = { _btn = btn, _page = page, _name = tabName, _ui = self }

        local function activate()
            for _, p in ipairs(self._pages:GetChildren()) do
                if p:IsA("ScrollingFrame") then p.Visible = false end
            end
            for _, b in ipairs(self._sidebar:GetChildren()) do
                if b:IsA("TextButton") then
                    b.BackgroundColor3 = Color3.fromRGB(28, 28, 30)
                end
            end
            page.Visible = true
            tween(btn, { BackgroundColor3 = Color3.fromRGB(34, 34, 36) }, 0.16)
            self._activeTab = tab
        end
        btn.MouseButton1Click:Connect(activate)
        if #self._tabs == 0 then activate() end

        -- Sections / Controls
        function tab:CreateSection(name)
            local sec = new("Frame", { Size = UDim2.new(1, 0, 0, 30), BackgroundTransparency = 1 }, page)
            new("TextLabel", {
                Text = name or "Section",
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(220, 220, 225),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Size = UDim2.new(1, 0, 1, 0),
                Parent = sec
            })
            return sec
        end

        function tab:CreateLabel(text)
            -- Wrap label in a container to preserve ordering and add left padding.
            local container = new("Frame", {
                Size = UDim2.new(1, 0, 0, 34),
                BackgroundColor3 = Color3.fromRGB(46, 46, 48),
                Parent = page
            })
            new("UICorner", { CornerRadius = UDim.new(0, 8) }, container)
            -- add a TextLabel with internal margin so text isn't flush against the left edge
            local l = new("TextLabel", {
                Text = text or "Label",
                -- inset by 12px from the left so text doesn't sit too close to the edge
                Size = UDim2.new(1, -24, 1, 0),
                Position = UDim2.new(0, 12, 0, 0),
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(235, 235, 240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = container
            })
            -- helper to update the label text
            return { Set = function(_, t) l.Text = t end, Object = container }
        end

        function tab:CreateButton(opts)
            opts = opts or {}
            local container = new("Frame", { Size = UDim2.new(1, 0, 0, 34), BackgroundTransparency = 1 }, page)
            local b = new("TextButton", {
                Text = opts.Name or "Button",
                Size = UDim2.new(1, 0, 0, 32),
                BackgroundColor3 = Color3.fromRGB(46, 46, 48),
                TextColor3 = Color3.fromRGB(235, 235, 240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            })
            new("UICorner", { CornerRadius = UDim.new(0, 8) }, b)
            b.MouseEnter:Connect(function()
                tween(b, { BackgroundColor3 = Color3.fromRGB(62, 62, 64) }, 0.14)
            end)
            b.MouseLeave:Connect(function()
                tween(b, { BackgroundColor3 = Color3.fromRGB(46, 46, 48) }, 0.14)
            end)
            b.MouseButton1Click:Connect(function()
                pcall(opts.Callback)
            end)
            return b
        end

        -- >>> NEW Toggle: label kiri, switch kanan (klik satu baris)
        function tab:CreateToggle(opts)
            opts = opts or {}
            local flag = opts.Flag
            local state = (flag and loadFlag(flag) ~= nil) and loadFlag(flag) or not not opts.CurrentValue
            local row = new("Frame", { Size = UDim2.new(1, 0, 0, 36), BackgroundTransparency = 1 }, page)
            local bg = new("Frame", { Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(46, 46, 48) }, row)
            new("UICorner", { CornerRadius = UDim.new(0, 8) }, bg)
            local label = new("TextLabel", {
                Text = opts.Name or "Toggle",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, -70, 1, 0),
                Position = UDim2.new(0, 12, 0, 0),
                TextXAlignment = Enum.TextXAlignment.Left,
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextColor3 = Color3.fromRGB(235, 235, 240)
            }, bg)
            local track = new("Frame", {
                AnchorPoint = Vector2.new(1, 0.5),
                Position = UDim2.new(1, -10, 0.5, 0),
                Size = UDim2.new(0, 44, 0, 22),
                BackgroundColor3 = Color3.fromRGB(68, 68, 72)
            }, bg)
            new("UICorner", { CornerRadius = UDim.new(0, 11) }, track)
            new("UIStroke", { Color = Color3.fromRGB(50, 50, 56), Thickness = 1 }, track)
            local knob = new("Frame", {
                AnchorPoint = Vector2.new(0, 0.5),
                Position = UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            }, track)
            new("UICorner", { CornerRadius = UDim.new(0, 9) }, knob)
            local hit = new("TextButton", {
                BackgroundTransparency = 1, Text = "", AutoButtonColor = false,
                Size = UDim2.new(1, 0, 1, 0)
            }, bg)
            local function paint(on, instant)
                local t = instant and 0 or 0.14
                if on then
                    tween(track, { BackgroundColor3 = Color3.fromRGB(0, 170, 255) }, t)
                    tween(knob, { Position = UDim2.new(1, -20, 0.5, 0) }, t)
                else
                    tween(track, { BackgroundColor3 = Color3.fromRGB(68, 68, 72) }, t)
                    tween(knob, { Position = UDim2.new(0, 2, 0.5, 0) }, t)
                end
            end
            local function setState(v, call)
                state = not not v
                paint(state)
                if flag then saveFlag(flag, state) end
                if call and opts.Callback then pcall(opts.Callback, state) end
            end
            hit.MouseButton1Click:Connect(function()
                setState(not state, true)
            end)
            track.InputBegan:Connect(function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                    setState(not state, true)
                end
            end)
            paint(state, true)
            return { Set = function(_, v) setState(v, false) end, Get = function() return state end, Object = row }
        end

        function tab:CreateSlider(opts)
            opts = opts or {}
            local flag = opts.Flag
            local range = opts.Range or { 0, 100 }
            local min, max = range[1], range[2]
            local value = opts.CurrentValue or min
            if flag then
                local saved = loadFlag(flag)
                if type(saved) == "number" then value = saved end
            end
            local container = new("Frame", { Size = UDim2.new(1, 0, 0, 48), BackgroundTransparency = 1 }, page)
            local label = new("TextLabel", {
                Text = (opts.Name or "Slider") .. ": " .. tostring(value),
                Size = UDim2.new(1, 0, 0, 18),
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(230, 230, 235),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = container
            })
            local barBack = new("Frame", {
                Size = UDim2.new(1, -10, 0, 12),
                Position = UDim2.new(0, 5, 0, 26),
                BackgroundColor3 = Color3.fromRGB(68, 68, 72),
                Parent = container
            })
            new("UICorner", { CornerRadius = UDim.new(0, 6) }, barBack)
            local fill = new("Frame", {
                Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(0, 170, 255),
                Parent = barBack
            })
            new("UICorner", { CornerRadius = UDim.new(0, 6) }, fill)
            local dragging = false
            local function setFromPos(x)
                local absPos = barBack.AbsolutePosition.X
                local absSize = barBack.AbsoluteSize.X
                local rel = clamp((x - absPos) / absSize, 0, 1)
                local val = math.floor(min + rel * (max - min) + 0.5)
                value = clamp(val, min, max)
                fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                label.Text = (opts.Name or "Slider") .. ": " .. tostring(value)
                if opts.Callback then pcall(opts.Callback, value) end
                if flag then saveFlag(flag, value) end
            end
            barBack.InputBegan:Connect(function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    setFromPos(i.Position.X)
                end
            end)
            UserInputService.InputChanged:Connect(function(i)
                if dragging and (i.UserInputType == Enum.UserInputType.MouseMovement or i.UserInputType == Enum.UserInputType.Touch) then
                    setFromPos(i.Position.X)
                end
            end)
            UserInputService.InputEnded:Connect(function(i)
                if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            return {
                Set = function(_, v)
                    v = tonumber(v) or value
                    v = clamp(v, min, max)
                    value = v
                    fill.Size = UDim2.new((v - min) / (max - min), 0, 1, 0)
                    label.Text = (opts.Name or "Slider") .. ": " .. v
                    if flag then saveFlag(flag, v) end
                end,
                Get = function() return value end
            }
        end

        -- Dropdown (single/multi) + search inline (tanpa popup)
        function tab:CreateDropdown(opts)
            opts = opts or {}
            local flag = opts.Flag
            local choices = opts.Options or {}
            local searchable = (opts.Searchable ~= false)
            local multi = (opts.MultiSelection == true)
            local selected = opts.CurrentOption or choices[1]
            local selectedList, selectedSet = {}, {}
            if multi then
                local saved = flag and loadFlag(flag)
                if type(saved) == "table" then
                    for _, v in ipairs(saved) do selectedSet[tostring(v)] = true; table.insert(selectedList, v) end
                elseif type(opts.CurrentOption) == "table" then
                    for _, v in ipairs(opts.CurrentOption) do selectedSet[tostring(v)] = true; table.insert(selectedList, v) end
                end
            else
                local saved = flag and loadFlag(flag)
                if saved ~= nil then selected = saved end
            end
            local function labelSummary()
                if not multi then
                    return (opts.Name or "Dropdown") .. ": " .. tostring(selected or "-")
                else
                    local n = #selectedList
                    if n == 0 then return (opts.Name or "Dropdown") .. ": (none)" end
                    if n <= 2 then return (opts.Name or "Dropdown") .. ": " .. table.concat(selectedList, ", ") end
                    return (opts.Name or "Dropdown") .. string.format(": %d selected", n)
                end
            end
            local baseHeight, openHeight = 36, 240
            local container = new("Frame", { Size = UDim2.new(1, 0, 0, baseHeight), BackgroundTransparency = 1 }, page)
            local header = new("TextButton", {
                Text = labelSummary(),
                Size = UDim2.new(1, 0, 0, 32),
                BackgroundColor3 = Color3.fromRGB(46, 46, 48),
                TextColor3 = Color3.fromRGB(235, 235, 240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            })
            new("UICorner", { CornerRadius = UDim.new(0, 8) }, header)
            local menu = new("Frame", {
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 0, 36),
                BackgroundColor3 = Color3.fromRGB(38, 38, 40),
                ClipsDescendants = true,
                Visible = false,
                Parent = container
            })
            new("UICorner", { CornerRadius = UDim.new(0, 8) }, menu)
            local searchBox
            if searchable then
                searchBox = new("TextBox", {
                    PlaceholderText = "Search...",
                    ClearTextOnFocus = false,
                    Text = "",
                    Size = UDim2.new(1, -12, 0, 26),
                    Position = UDim2.new(0, 6, 0, 6),
                    BackgroundColor3 = Color3.fromRGB(46, 46, 48),
                    TextColor3 = Color3.fromRGB(235, 235, 240),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    Parent = menu
                })
                new("UICorner", { CornerRadius = UDim.new(0, 6) }, searchBox)
            end
            local scroll = new("ScrollingFrame", {
                Size = UDim2.new(1, -12, 1, -(searchable and 40 or 12)),
                Position = UDim2.new(0, 6, 0, (searchable and 38 or 6)),
                BackgroundTransparency = 1,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 6,
                Parent = menu
            })
            local layout = new("UIListLayout", { Padding = UDim.new(0, 4) }, scroll)
            new("UIPadding", { PaddingBottom = UDim.new(0, 6) }, scroll)
            layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                scroll.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 6)
            end)
            local open = false
            header.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    menu.Visible = true
                    tween(menu, { Size = UDim2.new(1, 0, 0, openHeight) }, 0.18)
                    tween(container, { Size = UDim2.new(1, 0, 0, baseHeight + openHeight) }, 0.18)
                else
                    tween(menu, { Size = UDim2.new(1, 0, 0, 0) }, 0.14)
                    tween(container, { Size = UDim2.new(1, 0, 0, baseHeight) }, 0.14)
                    task.delay(0.16, function()
                        if not open then menu.Visible = false end
                    end)
                end
            end)
            local function isShown(choice, q)
                if not q or q == "" then return true end
                local s = tostring(choice):lower()
                return s:find(q, 1, true) ~= nil
            end
            local function syncLabelAndSave()
                header.Text = labelSummary()
                if flag then
                    if multi then saveFlag(flag, selectedList) else saveFlag(flag, selected) end
                end
            end
            local function rebuildList()
                for _, c in ipairs(scroll:GetChildren()) do
                    if c:IsA("TextButton") then c:Destroy() end
                end
                local q = searchable and (searchBox.Text or ""):lower() or ""
                for _, choice in ipairs(choices) do
                    if isShown(choice, q) then
                        local it = new("TextButton", {
                            Size = UDim2.new(1, 0, 0, 26),
                            BackgroundColor3 = Color3.fromRGB(45, 45, 47),
                            TextColor3 = Color3.fromRGB(230, 230, 235),
                            Font = Enum.Font.Gotham,
                            TextSize = 13,
                            AutoButtonColor = false,
                            Parent = scroll
                        })
                        new("UICorner", { CornerRadius = UDim.new(0, 6) }, it)
                        if multi then
                            local key = tostring(choice)
                            local checked = selectedSet[key] == true
                            it.Text = (checked and "☑ " or "☐ ") .. tostring(choice)
                            it.MouseButton1Click:Connect(function()
                                checked = not checked
                                selectedSet[key] = checked or nil
                                selectedList = {}
                                for _, ch in ipairs(choices) do if selectedSet[tostring(ch)] then table.insert(selectedList, ch) end end
                                it.Text = (checked and "☑ " or "☐ ") .. tostring(choice)
                                syncLabelAndSave()
                                if opts.Callback then pcall(opts.Callback, shallow_copy(selectedList)) end
                            end)
                        else
                            it.Text = tostring(choice) .. (choice == selected and "  •" or "")
                            it.MouseButton1Click:Connect(function()
                                selected = choice
                                syncLabelAndSave()
                                if opts.Callback then pcall(opts.Callback, selected) end
                                open = false
                                tween(menu, { Size = UDim2.new(1, 0, 0, 0) }, 0.14)
                                tween(container, { Size = UDim2.new(1, 0, 0, baseHeight) }, 0.14)
                                task.delay(0.16, function() if not open then menu.Visible = false end end)
                            end)
                        end
                    end
                end
            end
            if searchable then
                searchBox:GetPropertyChangedSignal("Text"):Connect(rebuildList)
            end
            rebuildList()
            return {
                SetOptions = function(_, newOpts)
                    choices = newOpts or {}
                    if multi then
                        local newSet, newList = {}, {}
                        for _, v in ipairs(choices) do
                            if selectedSet[tostring(v)] then
                                newSet[tostring(v)] = true
                                table.insert(newList, v)
                            end
                        end
                        selectedSet, selectedList = newSet, newList
                    else
                        local found = false
                        for _, v in ipairs(choices) do
                            if v == selected then found = true break end
                        end
                        if not found then selected = choices[1] end
                    end
                    syncLabelAndSave()
                    rebuildList()
                end,
                Set = function(_, valueOrList)
                    if multi then
                        selectedSet, selectedList = {}, {}
                        if type(valueOrList) == "table" then
                            for _, v in ipairs(valueOrList) do
                                selectedSet[tostring(v)] = true
                                table.insert(selectedList, v)
                            end
                        end
                    else
                        selected = valueOrList
                    end
                    syncLabelAndSave()
                    rebuildList()
                end,
                Get = function()
                    if multi then
                        return shallow_copy(selectedList)
                    else
                        return selected
                    end
                end
            }
        end

        function tab:CreateInput(opts)
            opts = opts or {}
            local placeholder = opts.PlaceholderText or ""
            local container = new("Frame", { Size = UDim2.new(1, 0, 0, 46), BackgroundTransparency = 1 }, page)
            new("TextLabel", {
                Text = opts.Name or "Input",
                Size = UDim2.new(1, 0, 0, 18),
                BackgroundTransparency = 1,
                TextColor3 = Color3.fromRGB(230, 230, 235),
                Font = Enum.Font.Gotham,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = container
            })
            local box = new("TextBox", {
                Text = opts.DefaultText or "",
                PlaceholderText = placeholder,
                ClearTextOnFocus = false,
                Size = UDim2.new(1, 0, 0, 24),
                Position = UDim2.new(0, 0, 0, 20),
                BackgroundColor3 = Color3.fromRGB(46, 46, 48),
                TextColor3 = Color3.fromRGB(235, 235, 240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                Parent = container
            })
            new("UICorner", { CornerRadius = UDim.new(0, 6) }, box)
            box.FocusLost:Connect(function(enter)
                if enter and opts.Callback then pcall(opts.Callback, box.Text) end
            end)
            return { Set = function(_, t) box.Text = t end, Get = function() return box.Text end }
        end

        function tab:CreateKeybind(opts)
            opts = opts or {}
            local current = opts.DefaultKey or Enum.KeyCode.G
            local container = new("Frame", { Size = UDim2.new(1, 0, 0, 34), BackgroundTransparency = 1 }, page)
            local btn = new("TextButton", {
                Text = (opts.Name or "Keybind") .. ": " .. tostring(current.Name or current),
                Size = UDim2.new(1, 0, 0, 32),
                BackgroundColor3 = Color3.fromRGB(46, 46, 48),
                TextColor3 = Color3.fromRGB(235, 235, 240),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                AutoButtonColor = false,
                Parent = container
            })
            new("UICorner", { CornerRadius = UDim.new(0, 8) }, btn)
            local listening = false
            btn.MouseButton1Click:Connect(function()
                listening = true
                btn.Text = (opts.Name or "Keybind") .. ": [Press key]"
            end)
            UserInputService.InputBegan:Connect(function(input, gpe)
                if gpe then return end
                if listening and input.KeyCode ~= Enum.KeyCode.Unknown then
                    current = input.KeyCode
                    btn.Text = (opts.Name or "Keybind") .. ": " .. tostring(current.Name)
                    listening = false
                    if opts.Callback then pcall(opts.Callback, current) end
                elseif input.KeyCode == current then
                    if opts.Callback then pcall(opts.Callback, current, true) end
                end
            end)
            return { Get = function() return current end }
        end

        table.insert(self._tabs, tab)
        return tab
    end
    return self
end

return IkanTongkol

taruh di mna}]
