-- ==================================================
-- Public: Tabs & Controls (inline)  [VERSI DENGAN LAYOUTORDER]
-- ==================================================
function self:CreateTab(tabCfg)
    tabCfg = tabCfg or {}
    local tabName = tabCfg.Name or ("Tab"..(#self._tabs+1))

    local btn = new("TextButton", {
        Text = tabName,
        Size = UDim2.new(1, 0, 0, 34),
        BackgroundColor3 = Color3.fromRGB(28,28,30),
        TextColor3 = Color3.fromRGB(220,220,225),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        AutoButtonColor = false
    }, sidebar)
    new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)

    local page = new("ScrollingFrame", {
        Name = tabName .. "_Page",
        Size = UDim2.new(1, 0, 1, 0),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
        Visible = false,
        Parent = pages
    }, pages)

    local list = new("UIListLayout", {
        Padding = UDim.new(0,8),
        SortOrder = Enum.SortOrder.LayoutOrder, -- penting
    }, page)
    new("UIPadding", {
        PaddingTop = UDim.new(0,12),
        PaddingLeft = UDim.new(0,12),
        PaddingRight = UDim.new(0,12),
        PaddingBottom = UDim.new(0,12)
    }, page)
    list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        page.CanvasSize = UDim2.new(0, 0, 0, list.AbsoluteContentSize.Y + 12)
    end)

    local tab = { _btn = btn, _page = page, _name = tabName,  _ui = self }
    -- allocator urutan
    tab._lo = 0
    function tab:_nextOrder()
        self._lo += 1
        return self._lo
    end

    local function activate()
        for _, p in ipairs(self._pages:GetChildren()) do
            if p:IsA("ScrollingFrame") then p.Visible = false end
        end
        for _, b in ipairs(self._sidebar:GetChildren()) do
            if b:IsA("TextButton") then b.BackgroundColor3 = Color3.fromRGB(28,28,30) end
        end
        page.Visible = true
        tween(btn, {BackgroundColor3 = Color3.fromRGB(34,34,36)}, 0.16)
        self._activeTab = tab
    end

    btn.MouseButton1Click:Connect(activate)
    if #self._tabs == 0 then activate() end

    -- ---------- Components ----------
    function tab:CreateSection(name)
        local container = new("Frame", { Size = UDim2.new(1,0,0,30), BackgroundTransparency = 1 }, page)
        container.LayoutOrder = tab:_nextOrder()
        new("TextLabel", {
            Text = name or "Section",
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(220,220,225),
            Font = Enum.Font.GothamBold,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Size = UDim2.new(1,0,1,0),
            Parent = container
        })
        return container
    end

    function tab:CreateButton(opts)
        opts = opts or {}
        local container = new("Frame", { Size = UDim2.new(1,0,0,34), BackgroundTransparency = 1 }, page)
        container.LayoutOrder = tab:_nextOrder()
        local b = new("TextButton", {
            Text = opts.Name or "Button",
            Size = UDim2.new(1,0,0,32),
            BackgroundColor3 = Color3.fromRGB(46,46,48),
            TextColor3 = Color3.fromRGB(235,235,240),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            AutoButtonColor = false,
            Parent = container
        }, container)
        new("UICorner", { CornerRadius = UDim.new(0,8) }, b)
        b.MouseEnter:Connect(function() tween(b, {BackgroundColor3 = Color3.fromRGB(62,62,64)}, 0.14) end)
        b.MouseLeave:Connect(function() tween(b, {BackgroundColor3 = Color3.fromRGB(46,46,48)}, 0.14) end)
        b.MouseButton1Click:Connect(function() pcall(opts.Callback) end)
        return b
    end

    function tab:CreateToggle(opts)
    opts = opts or {}
    local flag = opts.Flag
    local default = opts.CurrentValue
    if flag then
        local saved = loadFlag(flag)
        if saved ~= nil then default = saved end
    end
    local state = default and true or false

    -- container mengikuti urutan pemanggilan
    local container = new("Frame", {
        Size = UDim2.new(1,0,0,34),
        BackgroundTransparency = 1
    }, page)
    container.LayoutOrder = tab:_nextOrder()

    -- tombol klik (background)
    local btn = new("TextButton", {
        Text = "",
        Size = UDim2.new(1,0,0,32),
        BackgroundColor3 = Color3.fromRGB(46,46,48),
        AutoButtonColor = false
    }, container)
    new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)

    -- padding dalam tombol
    new("UIPadding", {
        PaddingLeft = UDim.new(0,12),
        PaddingRight = UDim.new(0,12)
    }, btn)

    -- label nama (kiri)
    local nameLbl = new("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -40, 1, 0),        -- sisakan ruang 40px untuk icon kanan
        Position = UDim2.new(0, 0, 0, 0),
        Text = opts.Name or "Toggle",
        TextXAlignment = Enum.TextXAlignment.Left,
        TextColor3 = Color3.fromRGB(235,235,240),
        Font = Enum.Font.Gotham,
        TextSize = 14
    }, btn)

    -- label status (kanan)
    local stateLbl = new("TextLabel", {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 32, 1, 0),
        Position = UDim2.new(1, -32, 0, 0),
        Text = state and "âœ…" or "ðŸ”˜",
        TextXAlignment = Enum.TextXAlignment.Right,
        TextColor3 = Color3.fromRGB(235,235,240),
        Font = Enum.Font.GothamBold,
        TextSize = 14
    }, btn)

    -- efek hover
    btn.MouseEnter:Connect(function()
        tween(btn, {BackgroundColor3 = Color3.fromRGB(62,62,64)}, 0.12)
    end)
    btn.MouseLeave:Connect(function()
        tween(btn, {BackgroundColor3 = Color3.fromRGB(46,46,48)}, 0.12)
    end)

    local function apply(newState, fireCallback)
        state = newState and true or false
        stateLbl.Text = state and "âœ…" or "ðŸ”˜"
        if flag then saveFlag(flag, state) end
        if fireCallback and opts.Callback then
            pcall(opts.Callback, state)
        end
    end

    -- toggle on click
    btn.MouseButton1Click:Connect(function()
        apply(not state, true)
    end)

    -- API yang dikembalikan (biar bisa dipanggil :Set(false) dari luar)
    local api = {
        Button = btn,
        Set = function(_, v) apply(v, false) end,
        Get = function() return state end,
    }
    return api
    end


    function tab:CreateSlider(opts)
        opts = opts or {}
        local flag = opts.Flag
        local range = opts.Range or {0,100}
        local min, max = range[1], range[2]
        local value = opts.CurrentValue or min
        if flag then
            local saved = loadFlag(flag)
            if type(saved) == "number" then value = saved end
        end

        local container = new("Frame", { Size = UDim2.new(1,0,0,48), BackgroundTransparency = 1 }, page)
        container.LayoutOrder = tab:_nextOrder()

        local label = new("TextLabel", {
            Text = (opts.Name or "Slider") .. ": " .. tostring(value),
            Size = UDim2.new(1,0,0,18),
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(230,230,235),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = container
        }, container)

        local barBack = new("Frame", {
            Size = UDim2.new(1, -10, 0, 12),
            Position = UDim2.new(0,5,0,26),
            BackgroundColor3 = Color3.fromRGB(68,68,72),
            Parent = container
        }, container)
        new("UICorner", { CornerRadius = UDim.new(0,6) }, barBack)
        local fill = new("Frame", {
            Size = UDim2.new((value-min)/(max-min), 0, 1, 0),
            BackgroundColor3 = Color3.fromRGB(0,170,255),
            Parent = barBack
        }, barBack)
        new("UICorner", { CornerRadius = UDim.new(0,6) }, fill)

        local dragging = false
        local function setFromPos(x)
            local absPos = barBack.AbsolutePosition.X
            local absSize = barBack.AbsoluteSize.X
            local rel = clamp((x - absPos) / absSize, 0, 1)
            local val = math.floor(min + rel * (max - min) + 0.5)
            value = clamp(val, min, max)
            fill.Size = UDim2.new((value-min)/(max-min), 0, 1, 0)
            label.Text = (opts.Name or "Slider") .. ": " .. tostring(value)
            if opts.Callback then pcall(opts.Callback, value) end
            if flag then saveFlag(flag, value) end
        end

        barBack.InputBegan:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                setFromPos(i.Position.X)
            end
        end)
        UserInputService.InputChanged:Connect(function(i)
            if dragging and (i.UserInputType == Enum.UserInputType.MouseMovement or i.UserInputType == Enum.UserInputType.Touch) then
                setFromPos(i.Position.X)
            end
        end)
        UserInputService.InputEnded:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
        return container
    end

    function tab:CreateDropdown(opts)
        opts = opts or {}
        local flag = opts.Flag
        local choices = opts.Options or {}
        local current = opts.CurrentOption or choices[1]
        if flag then
            local saved = loadFlag(flag)
            if saved ~= nil then current = saved end
        end

        local baseHeight = 36
        local container = new("Frame", {
            Size = UDim2.new(1, 0, 0, baseHeight),
            BackgroundTransparency = 1
        }, page)
        container.LayoutOrder = tab:_nextOrder()

        local label = new("TextButton", {
            Text = (opts.Name or "Dropdown") .. ": " .. tostring(current or "-"),
            Size = UDim2.new(1, 0, 0, 32),
            BackgroundColor3 = Color3.fromRGB(46,46,48),
            TextColor3 = Color3.fromRGB(235,235,240),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            AutoButtonColor = false,
            Parent = container
        }, container)
        new("UICorner", { CornerRadius = UDim.new(0,8) }, label)

        local menu = new("Frame", {
            Size = UDim2.new(1,0,0,0),
            Position = UDim2.new(0,0,0,36),
            BackgroundColor3 = Color3.fromRGB(38,38,40),
            ClipsDescendants = true,
            Visible = false,
            Parent = container
        }, container)
        new("UICorner", { CornerRadius = UDim.new(0,8) }, menu)
        new("UIListLayout", { Padding = UDim.new(0,4) }, menu)
        new("UIPadding", {
            PaddingTop = UDim.new(0,6),
            PaddingLeft = UDim.new(0,6),
            PaddingRight = UDim.new(0,6),
            PaddingBottom = UDim.new(0,6)
        }, menu)

        local open = false
        label.MouseButton1Click:Connect(function()
            open = not open
            if open then
                menu.Visible = true
                local menuHeight = math.clamp(#choices * 28 + 12, 32, 240)
                tween(menu, {Size = UDim2.new(1,0,0, menuHeight)}, 0.18)
                tween(container, {Size = UDim2.new(1,0,0, baseHeight + menuHeight)}, 0.18)
            else
                tween(menu, {Size = UDim2.new(1,0,0,0)}, 0.14)
                tween(container, {Size = UDim2.new(1,0,0, baseHeight)}, 0.14)
                task.delay(0.16, function()
                    if not open then menu.Visible = false end
                end)
            end
        end)

        for _, choice in ipairs(choices) do
            local it = new("TextButton", {
                Text = tostring(choice),
                Size = UDim2.new(1,0,0,26),
                BackgroundColor3 = Color3.fromRGB(45,45,47),
                TextColor3 = Color3.fromRGB(230,230,235),
                Font = Enum.Font.Gotham,
                TextSize = 13,
                AutoButtonColor = false,
                Parent = menu
            }, menu)
            new("UICorner", { CornerRadius = UDim.new(0,6) }, it)

            it.MouseButton1Click:Connect(function()
                current = choice
                label.Text = (opts.Name or "Dropdown") .. ": " .. tostring(current)
                if opts.Callback then pcall(opts.Callback, current) end
                if flag then saveFlag(flag, current) end
                open = false
                tween(menu, {Size = UDim2.new(1,0,0,0)}, 0.14)
                tween(container, {Size = UDim2.new(1,0,0, baseHeight)}, 0.14)
                task.delay(0.16, function() menu.Visible = false end)
            end)
        end

        return container
    end

    function tab:CreateInput(opts)
        opts = opts or {}
        local placeholder = opts.PlaceholderText or ""
        local container = new("Frame", { Size = UDim2.new(1,0,0,46), BackgroundTransparency = 1 }, page)
        container.LayoutOrder = tab:_nextOrder()

        new("TextLabel", {
            Text = opts.Name or "Input",
            Size = UDim2.new(1,0,0,18),
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(230,230,235),
            Font = Enum.Font.Gotham,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = container
        })

        local box = new("TextBox", {
            Text = opts.DefaultText or "",
            PlaceholderText = placeholder,
            ClearTextOnFocus = false,
            Size = UDim2.new(1,0,0,24),
            Position = UDim2.new(0,0,0,20),
            BackgroundColor3 = Color3.fromRGB(46,46,48),
            TextColor3 = Color3.fromRGB(235,235,240),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            Parent = container
        })
        new("UICorner", { CornerRadius = UDim.new(0,6) }, box)

        box.FocusLost:Connect(function(enter)
            if enter and opts.Callback then pcall(opts.Callback, box.Text) end
        end)
        return container
    end

    function tab:CreateKeybind(opts)
        opts = opts or {}
        local current = opts.DefaultKey or Enum.KeyCode.G
        local container = new("Frame", { Size = UDim2.new(1,0,0,34), BackgroundTransparency = 1 }, page)
        container.LayoutOrder = tab:_nextOrder()

        local btn = new("TextButton", {
            Text = (opts.Name or "Keybind") .. ": " .. tostring(current.Name or current),
            Size = UDim2.new(1,0,0,32),
            BackgroundColor3 = Color3.fromRGB(46,46,48),
            TextColor3 = Color3.fromRGB(235,235,240),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            AutoButtonColor = false,
            Parent = container
        }, container)
        new("UICorner", { CornerRadius = UDim.new(0,8) }, btn)

        local listening = false
        btn.MouseButton1Click:Connect(function()
            listening = true
            btn.Text = (opts.Name or "Keybind") .. ": [Press key]"
        end)

        UserInputService.InputBegan:Connect(function(input, gpe)
            if gpe then return end
            if listening and input.KeyCode ~= Enum.KeyCode.Unknown then
                current = input.KeyCode
                btn.Text = (opts.Name or "Keybind") .. ": " .. tostring(current.Name)
                listening = false
                if opts.Callback then pcall(opts.Callback, current) end
            elseif input.KeyCode == current then
                if opts.Callback then pcall(opts.Callback, current, true) end
            end
        end)
        return container
    end

    table.insert(self._tabs, tab)
    return tab
end
