-- IkanTongkol GUI • Full Version
-- Theme: Ocean Fresh (default)
-- Features: Icons tab, fold sections, dropdown popup (highlight), persist flags, minimize, roll-up
-- by you & chatgpt

local Players      = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local HttpService  = game:GetService("HttpService")
local LocalPlayer  = Players.LocalPlayer

local IkanTongkol = {}
IkanTongkol.__index = IkanTongkol

--================= UTIL =================
local function new(class, props, parent)
    local inst = Instance.new(class)
    if props then for k,v in pairs(props) do inst[k]=v end end
    if parent then inst.Parent = parent end
    return inst
end
local function tween(inst, props, t, style, dir)
    t=t or 0.18; style=style or Enum.EasingStyle.Quad; dir=dir or Enum.EasingDirection.Out
    local tw = TweenService:Create(inst, TweenInfo.new(t, style, dir), props); tw:Play(); return tw
end

--================= THEME =================
local OceanFresh = {
  bg1   = Color3.fromRGB(18,22,24),
  bg2   = Color3.fromRGB(24,28,32),
  card  = Color3.fromRGB(32,38,42),
  hover = Color3.fromRGB(42,50,55),
  stroke= Color3.fromRGB(58,70,76),
  text  = Color3.fromRGB(236,240,243),
  textMuted = Color3.fromRGB(198,206,210),
  accent      = Color3.fromRGB(0,200,185),
  accentHover = Color3.fromRGB(0,170,160),
  gradA       = Color3.fromRGB(120,255,230),
  gradB       = Color3.fromRGB(0,150,190),
}
local __DEFAULT_THEME__ = OceanFresh
function IkanTongkol.SetDefaultTheme(themeTable)
    if typeof(themeTable)=="table" then __DEFAULT_THEME__ = themeTable end
end

--================= PERSIST =================
local function getStoreFolder()
    local pg = LocalPlayer:FindFirstChild("PlayerGui") or LocalPlayer:WaitForChild("PlayerGui")
    local f = pg:FindFirstChild("IkanTongkolStore")
    if not f then f = Instance.new("Folder"); f.Name="IkanTongkolStore"; f.Parent=pg end
    return f
end
local function saveFlag(flag, value)
    if not flag then return end
    local f = getStoreFolder()
    local key = f:FindFirstChild(flag) or Instance.new("StringValue")
    key.Name = flag; key.Parent = f
    key.Value = HttpService:JSONEncode(value)
end
local function loadFlag(flag)
    if not flag then return nil end
    local f = getStoreFolder()
    local key = f:FindFirstChild(flag)
    if not key then return nil end
    local ok, val = pcall(HttpService.JSONDecode, HttpService, key.Value)
    return ok and val or nil
end
local function hasfs(fn) return typeof(getfenv()[fn])=="function" end
local FS_FOLDER, FS_FILE = "IkanTongkol", "Settings.Tgkl"
local __flushPending = false
local function flushToFile()
    if not (hasfs("isfolder") and hasfs("makefolder") and hasfs("writefile")) then return end
    if not isfolder(FS_FOLDER) then pcall(makefolder, FS_FOLDER) end
    local data = {}
    for _,sv in ipairs(getStoreFolder():GetChildren()) do
        if sv:IsA("StringValue") then
            local ok, val = pcall(HttpService.JSONDecode, HttpService, sv.Value)
            data[sv.Name] = ok and val or sv.Value
        end
    end
    pcall(function() writefile(FS_FOLDER.."/"..FS_FILE, HttpService:JSONEncode(data)) end)
end
local function scheduleFlush()
    if __flushPending then return end
    __flushPending = true
    task.delay(0.5, function() __flushPending=false; flushToFile() end)
end
local function loadFromFileIfAny()
    if not (hasfs("isfile") and hasfs("readfile")) then return end
    local p = FS_FOLDER.."/"..FS_FILE
    if not isfile(p) then return end
    local ok, decoded = pcall(function() return HttpService:JSONDecode(readfile(p)) end)
    if not (ok and type(decoded)=="table") then return end
    for k,v in pairs(decoded) do saveFlag(k, v) end
end

--================= WINDOW =================
function IkanTongkol:CreateWindow(cfg)
    cfg = cfg or {}
    local THEME = cfg.Theme or __DEFAULT_THEME__
    local self = setmetatable({}, IkanTongkol)
    self._theme = THEME

    -- load persisted flags snapshot
    loadFromFileIfAny()

    -- layout preset (seperti referensi)
    local WIN_SIZE = cfg.Size or UDim2.fromOffset(760, 440)
    local TOP_H    = cfg.TopbarHeight or 44
    local SBAR_W   = cfg.SidebarWidth or 180

    local gui = new("ScreenGui", {
        Name = cfg.Name or "IkanTongkolUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global
    }, LocalPlayer:WaitForChild("PlayerGui"))

    local main = new("Frame", {
        AnchorPoint = Vector2.new(0.5,0.5),
        Position = UDim2.new(0.5,0,0.5,0),
        Size = WIN_SIZE,
        BackgroundColor3 = THEME.bg1,
        BorderSizePixel = 0
    }, gui)
    new("UICorner", {CornerRadius=UDim.new(0,12)}, main)
    new("UIStroke", {Color=THEME.stroke, Thickness=1, Transparency=0.2}, main)

    local top = new("Frame", {Size = UDim2.new(1,0,0,TOP_H), BackgroundColor3 = THEME.bg2}, main)
    new("UICorner", {CornerRadius=UDim.new(0,12)}, top)

    new("TextLabel", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0,12,0,(TOP_H-28)/2),
        Size = UDim2.new(1,-160,0,28),
        Text = cfg.Title or "Ikan Tongkol",
        Font = Enum.Font.GothamBold, TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = THEME.text
    }, top)

    -- window buttons
    local CloseBtn = new("TextButton", {
        Size = UDim2.new(0,30,0,30), Position = UDim2.new(1,-34,0.5,-15),
        Text = "✕", TextSize = 18, BackgroundTransparency = 1,
        AutoButtonColor=false, TextColor3 = THEME.text
    }, top)
    local BoxBtn = new("TextButton", { -- roll-up (topbar only)
        Size = UDim2.new(0,30,0,30), Position = UDim2.new(1,-66,0.5,-15),
        Text = "▢", TextSize = 16, BackgroundTransparency = 1,
        AutoButtonColor=false, TextColor3 = THEME.text
    }, top)
    local MinBtn = new("TextButton", {
        Size = UDim2.new(0,30,0,30), Position = UDim2.new(1,-98,0.5,-15),
        Text = "—", TextSize = 20, BackgroundTransparency = 1,
        AutoButtonColor=false, TextColor3 = THEME.text
    }, top)

    CloseBtn.MouseButton1Click:Connect(function() main.Visible=false end)

    -- Mini-dock (untuk minimize)
    local MiniDock = new("TextButton", {
        Name="MiniDock", Visible=false, Text="IK", Font=Enum.Font.GothamBold, TextSize=14,
        TextColor3=THEME.text, AutoButtonColor=false,
        Size=UDim2.new(0,52,0,52), Position=UDim2.new(0,18,1,-70),
        BackgroundColor3=THEME.bg2, Parent=gui
    })
    new("UICorner",{CornerRadius=UDim.new(0,12)}, MiniDock)
    new("UIStroke",{Color=THEME.stroke, Thickness=1, Transparency=0.2}, MiniDock)

    -- drag mini-dock
    do
        local dragging, startPos, startInput
        MiniDock.InputBegan:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging=true; startInput=i.Position; startPos=MiniDock.Position
                i.Changed:Connect(function() if i.UserInputState==Enum.UserInputState.End then dragging=false end end)
            end
        end)
        game:GetService("UserInputService").InputChanged:Connect(function(i)
            if dragging and i.UserInputType==Enum.UserInputType.MouseMovement then
                local d = i.Position - startInput
                MiniDock.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + d.X, startPos.Y.Scale, startPos.Y.Offset + d.Y)
            end
        end)
    end

    MinBtn.MouseButton1Click:Connect(function()
        main.Visible=false; MiniDock.Visible=true
    end)
    MiniDock.MouseButton1Click:Connect(function()
        main.Visible=true; MiniDock.Visible=false
    end)

    -- roll-up (tampilkan topbar saja)
    local isRolled, savedSizeRoll, savedPosRoll = false, main.Size, main.Position
    local sidebar, content -- dideklarasi lebih dulu, diisi di bawah
    local function setRolled(on, animate)
        if on == isRolled then return end
        isRolled = on
        if isRolled then
            savedSizeRoll, savedPosRoll = main.Size, main.Position
            if sidebar then sidebar.Visible=false end
            if content then content.Visible=false end
            BoxBtn.Text = "▣"
            local targetSize = UDim2.new(savedSizeRoll.X.Scale, savedSizeRoll.X.Offset, 0, TOP_H)
            if animate ~= false then tween(main,{Size=targetSize},0.16) else main.Size=targetSize end
        else
            if sidebar then sidebar.Visible=true end
            if content then content.Visible=true end
            BoxBtn.Text = "▢"
            if animate ~= false then tween(main,{Size=savedSizeRoll, Position=savedPosRoll},0.16)
            else main.Size=savedSizeRoll; main.Position=savedPosRoll end
        end
    end
    BoxBtn.MouseButton1Click:Connect(function() setRolled(not isRolled, true) end)
    do -- double click topbar toggles roll
        local lastClick=0
        top.InputBegan:Connect(function(i)
            if i.UserInputType==Enum.UserInputType.MouseButton1 then
                local now=tick()
                if (now-lastClick)<=0.3 then setRolled(not isRolled, true) end
                lastClick=now
            end
        end)
    end

    -- sidebar & content
    sidebar = new("Frame", {
        Position = UDim2.new(0,0,0,TOP_H),
        Size = UDim2.new(0,SBAR_W,1,-TOP_H),
        BackgroundColor3 = THEME.bg2
    }, main)
    local sbList = new("UIListLayout", {Padding = UDim.new(0,8)}, sidebar)
    new("UIPadding", {PaddingTop=UDim.new(0,8), PaddingLeft=UDim.new(0,8), PaddingRight=UDim.new(0,8)}, sidebar)

    content = new("Frame", {
        Position = UDim2.new(0,SBAR_W,0,TOP_H),
        Size = UDim2.new(1,-SBAR_W,1,-TOP_H),
        BackgroundColor3 = THEME.bg1
    }, main)
    local pages = new("Folder", {Name="Pages"}, content)

    -- drag topbar
    do
        local dragging, startPos, startInput
        top.InputBegan:Connect(function(i)
            if i.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true; startInput = i.Position; startPos = main.Position
                i.Changed:Connect(function()
                    if i.UserInputState == Enum.UserInputState.End then dragging=false end
                end)
            end
        end)
        game:GetService("UserInputService").InputChanged:Connect(function(i)
            if dragging and i.UserInputType == Enum.UserInputType.MouseMovement then
                local d = i.Position - startInput
                main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + d.X, startPos.Y.Scale, startPos.Y.Offset + d.Y)
            end
        end)
    end

    -- cache
    self._gui = gui
    self._main = main
    self._top = top
    self._sidebar = sidebar
    self._pages = pages
    self._activeTab = nil

    --================= TAB + KOMPONEN =================
    function self:CreateTab(tabCfg)
        tabCfg = tabCfg or {}
        local THEME = self._theme
        local tabName = tabCfg.Name or ("Tab"..(#self._sidebar:GetChildren()+1))
        local iconId  = tabCfg.Icon

        local btn = new("TextButton", {
            Size = UDim2.new(1,0,0,36),
            BackgroundColor3 = THEME.card,
            AutoButtonColor = false,
            Text = "",
            Parent = self._sidebar
        })
        new("UICorner", {CornerRadius=UDim.new(0,8)}, btn)
        new("UIStroke", {Color=THEME.stroke, Thickness=1, Transparency=0.25}, btn)

        if iconId then
            new("ImageLabel", {
                BackgroundTransparency = 1, Image = iconId,
                ImageColor3 = THEME.textMuted,
                AnchorPoint = Vector2.new(0,0.5), Position = UDim2.new(0,10,0.5,0),
                Size = UDim2.new(0,18,0,18), Parent = btn
            })
        end
        new("TextLabel", {
            BackgroundTransparency = 1,
            Position = UDim2.new(0, iconId and 36 or 12, 0, 0),
            Size = UDim2.new(1, -40, 1, 0),
            TextXAlignment = Enum.TextXAlignment.Left,
            TextColor3 = THEME.text, Text = tabName,
            Font = Enum.Font.Gotham, TextSize = 14, Parent = btn
        })

        local page = new("ScrollingFrame", {
            Visible = false, BackgroundTransparency = 1,
            Size = UDim2.new(1,0,1,0), CanvasSize = UDim2.new(0,0,0,0),
            ScrollBarThickness = 6, Parent = self._pages
        })
        local list = new("UIListLayout", {Padding = UDim.new(0,8)}, page)
        new("UIPadding", {PaddingTop=UDim.new(0,12), PaddingLeft=UDim.new(0,12), PaddingRight=UDim.new(0,12), PaddingBottom=UDim.new(0,12)}, page)
        list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0,0,0, list.AbsoluteContentSize.Y + 12)
        end)

        local tab = { _btn=btn, _page=page, _ui=self }

        local function activate()
            for _,p in ipairs(self._pages:GetChildren()) do if p:IsA("ScrollingFrame") then p.Visible=false end end
            for _,b in ipairs(self._sidebar:GetChildren()) do
                if b:IsA("TextButton") then tween(b, {BackgroundColor3 = THEME.card}, 0.12) end
                local img = b:FindFirstChildOfClass("ImageLabel"); if img then img.ImageColor3 = THEME.textMuted end
            end
            page.Visible = true
            tween(btn, {BackgroundColor3 = THEME.bg2}, 0.12)
            local img = btn:FindFirstChildOfClass("ImageLabel"); if img then img.ImageColor3 = THEME.text end
            self._activeTab = tab
        end
        btn.MouseEnter:Connect(function() if self._activeTab ~= tab then tween(btn,{BackgroundColor3=THEME.hover},0.12) end end)
        btn.MouseLeave:Connect(function() if self._activeTab ~= tab then tween(btn,{BackgroundColor3=THEME.card},0.12) end end)
        btn.MouseButton1Click:Connect(activate)
        if not self._activeTab then activate() end

        ---------------- BASIC CONTROLS ----------------
        function tab:CreateLabel(text)
            local l = new("TextLabel", {
                Size = UDim2.new(1,0,0,34), BackgroundColor3 = THEME.card,
                TextColor3 = THEME.text, Font = Enum.Font.Gotham, TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left, Text = tostring(text or "Label"),
                Parent = page
            })
            new("UICorner", {CornerRadius=UDim.new(0,8)}, l)
            return { Set=function(_,t) l.Text=t end, Object=l }
        end

        function tab:CreateButton(opts)
            opts = opts or {}
            local b = new("TextButton", {
                Size = UDim2.new(1,0,0,34), BackgroundColor3 = THEME.card,
                TextColor3 = THEME.text, Font = Enum.Font.Gotham, TextSize = 14,
                AutoButtonColor = false, Text = opts.Name or "Button", Parent = page
            })
            new("UICorner", {CornerRadius=UDim.new(0,8)}, b)
            b.MouseEnter:Connect(function() tween(b, {BackgroundColor3 = THEME.hover}, 0.12) end)
            b.MouseLeave:Connect(function() tween(b, {BackgroundColor3 = THEME.card}, 0.12) end)
            b.MouseButton1Click:Connect(function() if opts.Callback then pcall(opts.Callback) end end)
            return b
        end

        function tab:CreateToggle(opts)
            opts = opts or {}
            local flag = opts.Flag
            local default = opts.CurrentValue and true or false
            local saved = flag and loadFlag(flag)
            local state = (type(saved)=="boolean") and saved or default

            local row = new("Frame", {Size=UDim2.new(1,0,0,36), BackgroundTransparency=1, Parent=page})
            local bg  = new("Frame", {Size=UDim2.new(1,0,1,0), BackgroundColor3=THEME.card, Parent=row})
            new("UICorner", {CornerRadius=UDim.new(0,8)}, bg)

            new("TextLabel",{
                BackgroundTransparency=1, Text=tostring(opts.Name or "Toggle"),
                Size=UDim2.new(1,-70,1,0), Position=UDim2.new(0,12,0,0),
                TextXAlignment=Enum.TextXAlignment.Left, Font=Enum.Font.Gotham, TextSize=14,
                TextColor3=THEME.text, Parent=bg
            })

            local track = new("Frame",{
                AnchorPoint=Vector2.new(1,0.5), Position=UDim2.new(1,-10,0.5,0),
                Size=UDim2.new(0,44,0,22), BackgroundColor3=THEME.hover, Parent=bg
            })
            new("UICorner", {CornerRadius=UDim.new(0,11)}, track)
            new("UIStroke", {Color=THEME.stroke, Thickness=1, Transparency=0.2}, track)
            local knob = new("Frame",{
                AnchorPoint=Vector2.new(0,0.5), Position=UDim2.new(0,2,0.5,0),
                Size=UDim2.new(0,18,0,18), BackgroundColor3=Color3.fromRGB(255,255,255), Parent=track
            })
            new("UICorner", {CornerRadius=UDim.new(0,9)}, knob)

            local function paint(on, instant)
                local t = instant and 0 or 0.14
                if on then
                    tween(track, {BackgroundColor3 = THEME.accent}, t)
                    tween(knob, {Position = UDim2.new(1,-20,0.5,0)}, t)
                else
                    tween(track, {BackgroundColor3 = THEME.hover}, t)
                    tween(knob, {Position = UDim2.new(0,2,0.5,0)}, t)
                end
            end
            paint(state, true)

            local function set(v, call)
                state = v and true or false
                paint(state)
                if flag then saveFlag(flag, state); scheduleFlush() end
                if call and opts.Callback then pcall(opts.Callback, state) end
            end
            local hit = new("TextButton",{BackgroundTransparency=1, Text="", AutoButtonColor=false, Size=UDim2.new(1,0,1,0), Parent=bg})
            hit.MouseButton1Click:Connect(function() set(not state, true) end)

            return { Set=function(_,v) set(v,false) end, Get=function() return state end, Object=row }
        end

        function tab:CreateInput(opts)
            opts = opts or {}
            local flag = opts.Flag
            local defaultText = opts.DefaultText or ""
            local saved = flag and loadFlag(flag)
            local startText = (type(saved)=="string" or type(saved)=="number") and tostring(saved) or defaultText

            local container = new("Frame",{Size=UDim2.new(1,0,0,46), BackgroundTransparency=1, Parent=page})
            new("TextLabel",{
                BackgroundTransparency=1, Text=tostring(opts.Name or "Input"),
                Size=UDim2.new(1,0,0,18), Font=Enum.Font.Gotham, TextSize=13,
                TextColor3=THEME.text, TextXAlignment=Enum.TextXAlignment.Left, Parent=container
            })
            local box = new("TextBox",{
                Text = startText, PlaceholderText = opts.PlaceholderText or "",
                ClearTextOnFocus = false,
                Size=UDim2.new(1,0,0,24), Position=UDim2.new(0,0,0,20),
                BackgroundColor3 = THEME.card, TextColor3 = THEME.text,
                Font=Enum.Font.Gotham, TextSize=14, Parent=container
            })
            new("UICorner",{CornerRadius=UDim.new(0,6)}, box)
            box.FocusLost:Connect(function(enter)
                if flag then saveFlag(flag, box.Text) scheduleFlush() end
                if enter and opts.Callback then pcall(opts.Callback, box.Text) end
            end)
            return { Set=function(_,t) box.Text=t; if flag then saveFlag(flag, t) scheduleFlush() end end,
                     Get=function() return box.Text end, Object=container }
        end

        --------------- FOLD (row + chevron) ---------------
        function tab:CreateFold(opts)
            opts = opts or {}
            local THEME = self._ui._theme
            local titleText = opts.Title or opts.Name or "Section"
            local foldFlag  = opts.Flag or ("fold:"..tostring(titleText))
            local savedOpen = loadFlag(foldFlag)
            local open = (type(savedOpen)=="boolean") and savedOpen or false

            local card = new("Frame", {Size=UDim2.new(1,0,0,48), BackgroundColor3=THEME.card, Parent=page})
            new("UICorner",{CornerRadius=UDim.new(0,10)}, card)
            new("UIStroke",{Color=THEME.stroke, Thickness=1, Transparency=0.2}, card)

            local head = new("TextButton",{Size=UDim2.new(1,0,0,48), BackgroundTransparency=1, AutoButtonColor=false, Text="", Parent=card})
            local lbl = new("TextLabel",{
                BackgroundTransparency=1, Position=UDim2.new(0,14,0,0), Size=UDim2.new(1,-64,1,0),
                TextXAlignment=Enum.TextXAlignment.Left, Text=titleText,
                Font=Enum.Font.GothamBold, TextSize=14, TextColor3=THEME.text, Parent=head
            })
            local chev = new("TextLabel",{
                AnchorPoint=Vector2.new(1,0.5), Position=UDim2.new(1,-12,0.5,0), Size=UDim2.new(0,18,0,18),
                BackgroundTransparency=1, Text=open and "▾" or "›", Font=Enum.Font.GothamBold, TextSize=18, TextColor3=THEME.textMuted, Parent=head
            })

            local body = new("Frame",{
                Position=UDim2.new(0,0,0,48), Size=UDim2.new(1,0,0, open and 1 or 0),
                BackgroundTransparency=1, ClipsDescendants=true, Parent=card
            })
            local bodyList = new("UIListLayout",{Padding=UDim.new(0,8)}, body)
            new("UIPadding",{
                PaddingTop=UDim.new(0,10), PaddingBottom=UDim.new(0,12),
                PaddingLeft=UDim.new(0,10), PaddingRight=UDim.new(0,10)
            }, body)

            local function resize()
                local h = open and (48 + bodyList.AbsoluteContentSize.Y + 14) or 48
                tween(card, {Size=UDim2.new(1,0,0,h)}, 0.16)
                tween(body, {Size=UDim2.new(1,0,0, math.max(0,h-48))}, 0.16)
                chev.Text = open and "▾" or "›"
                tween(card, {BackgroundColor3 = open and THEME.bg2 or THEME.card}, 0.12)
            end
            bodyList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(resize)

            head.MouseEnter:Connect(function() if not open then tween(card,{BackgroundColor3=THEME.hover},0.12) end end)
            head.MouseLeave:Connect(function() if not open then tween(card,{BackgroundColor3=THEME.card},0.12) end end)
            head.MouseButton1Click:Connect(function()
                open = not open; resize(); saveFlag(foldFlag, open); scheduleFlush()
            end)

            if open then task.defer(resize) end

            local fold = {}
            fold._root = card
            function fold:SetTitle(t) lbl.Text = tostring(t or "") end
            function fold:Open() open=true; resize(); saveFlag(foldFlag, true); scheduleFlush() end
            function fold:Close() open=false; resize(); saveFlag(foldFlag, false); scheduleFlush() end

            local function attach(obj)
                local fr = obj and (obj.Object or obj)
                if typeof(fr)=="Instance" then fr.Parent = body end
                resize(); return obj
            end

            function fold:AddSection(title)
                local sec = new("Frame",{Size=UDim2.new(1,0,0,28), BackgroundTransparency=1})
                new("TextLabel",{
                    Text=tostring(title or "Section"), BackgroundTransparency=1,
                    TextXAlignment=Enum.TextXAlignment.Left, Font=Enum.Font.GothamBold, TextSize=13,
                    TextColor3=THEME.textMuted, Size=UDim2.new(1,0,0,20), Position=UDim2.new(0,2,0,0),
                    Parent=sec
                })
                new("Frame",{Size=UDim2.new(1,0,0,1), Position=UDim2.new(0,0,1,-1), BackgroundColor3=THEME.stroke, BorderSizePixel=0, Parent=sec})
                sec.Parent = body; resize(); return sec
            end
            function fold:AddDivider()
                attach(new("Frame",{Size=UDim2.new(1,0,0,1), BackgroundColor3=THEME.stroke, BorderSizePixel=0}))
            end
            function fold:AddParagraph(opts)
                opts = opts or {}
                local wrap = new("Frame",{BackgroundTransparency=1, AutomaticSize=Enum.AutomaticSize.Y, Size=UDim2.new(1,0,0,0), Parent=body})
                new("TextLabel",{
                    BackgroundTransparency=1, Text=tostring(opts.Text or ""), TextWrapped=true, RichText=true,
                    TextXAlignment=Enum.TextXAlignment.Left, TextYAlignment=Enum.TextYAlignment.Top,
                    Font=Enum.Font.Gotham, TextSize=13, TextColor3=THEME.textMuted,
                    AutomaticSize=Enum.AutomaticSize.Y, Size=UDim2.new(1,-6,0,0), Position=UDim2.new(0,3,0,0), Parent=wrap
                })
                resize(); return {Object=wrap}
            end
            function fold:AddCallout(opts)
                opts=opts or {}
                local card2=new("Frame",{BackgroundColor3=THEME.bg2, AutomaticSize=Enum.AutomaticSize.Y, Size=UDim2.new(1,0,0,0), Parent=body})
                new("UICorner",{CornerRadius=UDim.new(0,8)}, card2)
                new("UIStroke",{Color=THEME.stroke, Thickness=1, Transparency=0.2}, card2)
                new("UIPadding",{PaddingTop=UDim.new(0,10),PaddingBottom=UDim.new(0,10),PaddingLeft=UDim.new(0,10),PaddingRight=UDim.new(0,10)}, card2)
                new("TextLabel",{Text="ℹ", BackgroundTransparency=1, Size=UDim2.new(0,18,0,18),
                    TextColor3=THEME.gradB, Font=Enum.Font.GothamBold, TextSize=16, Parent=card2})
                new("TextLabel",{Text=tostring(opts.Title or "Info"), BackgroundTransparency=1,
                    Position=UDim2.new(0,24,0,0), Size=UDim2.new(1,-24,0,18),
                    TextXAlignment=Enum.TextXAlignment.Left, Font=Enum.Font.GothamBold, TextSize=14, TextColor3=THEME.text, Parent=card2})
                new("TextLabel",{Text=tostring(opts.Text or ""), BackgroundTransparency=1, TextWrapped=true, RichText=true,
                    Position=UDim2.new(0,0,0,22), Size=UDim2.new(1,0,0,0), AutomaticSize=Enum.AutomaticSize.Y,
                    TextXAlignment=Enum.TextXAlignment.Left, TextYAlignment=Enum.TextYAlignment.Top,
                    Font=Enum.Font.Gotham, TextSize=13, TextColor3=THEME.text, Parent=card2})
                resize(); return {Object=card2}
            end

            -- adaptor ke kontrol tab
            function fold:AddButton(o)   return attach(tab:CreateButton(o)) end
            function fold:AddToggle(o)   return attach(tab:CreateToggle(o)) end
            function fold:AddInput(o)    return attach(tab:CreateInput(o)) end
            function fold:AddLabel(t)    return attach(tab:CreateLabel(t)) end

            -- DROPDOWN POPUP (tanpa checkbox; highlight warna)
            function fold:AddDropdownPopup(o)
                o=o or {}
                local flag = o.Flag
                local opts = o.Options or {}

                local saved = flag and loadFlag(flag)
                local current
                if o.MultiSelection then
                    current = (type(saved)=="table" and saved) or (type(o.CurrentOption)=="table" and o.CurrentOption) or {}
                else
                    current = (saved ~= nil and saved) or (o.CurrentOption ~= nil and o.CurrentOption) or ""
                end

                local header = new("TextButton",{
                    Size=UDim2.new(1,0,0,34), BackgroundColor3=THEME.card,
                    TextColor3=THEME.text, Font=Enum.Font.Gotham, TextSize=14,
                    AutoButtonColor=false, Text=tostring(o.Name or "Select"), Parent=body
                })
                new("UICorner",{CornerRadius=UDim.new(0,8)}, header)
                header.MouseEnter:Connect(function() tween(header,{BackgroundColor3=THEME.hover},0.12) end)
                header.MouseLeave:Connect(function() tween(header,{BackgroundColor3=THEME.card},0.12) end)

                local function openPopup()
                    local overlay = new("Frame",{
                        Size=UDim2.fromScale(1,1), BackgroundColor3=Color3.new(0,0,0),
                        BackgroundTransparency=0.35, ZIndex=1000, Active=true, Parent=self._ui._gui
                    })
                    local modal = new("Frame",{
                        AnchorPoint=Vector2.new(0.5,0.5), Position=UDim2.fromScale(0.5,0.5),
                        Size=UDim2.new(0, math.min(420, self._ui._main.AbsoluteSize.X-60), 0, 360),
                        BackgroundColor3=THEME.bg2, ZIndex=1001, Parent=overlay
                    })
                    new("UICorner",{CornerRadius=UDim.new(0,12)}, modal)
                    new("UIStroke",{Color=THEME.stroke, Thickness=1, Transparency=0.2}, modal)

                    local title = new("TextLabel",{
                        BackgroundTransparency=1, Text = tostring(o.PopupTitle or o.Name or "Select"),
                        TextColor3=THEME.text, Font=Enum.Font.GothamBold, TextSize=15,
                        AnchorPoint=Vector2.new(0,0), Position=UDim2.new(0,14,0,10),
                        Size=UDim2.new(1,-80,0,20), ZIndex=1002, Parent=modal
                    })
                    local closeB = new("TextButton",{Text="✕", TextSize=18, BackgroundTransparency=1,
                        AutoButtonColor=false, TextColor3=THEME.textMuted,
                        AnchorPoint=Vector2.new(1,0), Position=UDim2.new(1,-10,0,8),
                        Size=UDim2.new(0,24,0,24), ZIndex=1002, Parent=modal
                    })
                    closeB.MouseButton1Click:Connect(function() overlay:Destroy() end)

                    local search = new("TextBox",{
                        PlaceholderText = "Input here...",
                        ClearTextOnFocus = false, Text = "",
                        Size = UDim2.new(1,-20,0,28), Position = UDim2.new(0,10,0,38),
                        BackgroundColor3 = THEME.card, TextColor3 = THEME.text,
                        Font=Enum.Font.Gotham, TextSize=14, ZIndex=1002, Parent=modal
                    })
                    new("UICorner",{CornerRadius=UDim.new(0,6)}, search)

                    local listF = new("ScrollingFrame",{
                        Size = UDim2.new(1,-20,1,-(38+36+12)), Position = UDim2.new(0,10,0,38+36),
                        BackgroundTransparency=1, CanvasSize=UDim2.new(0,0,0,0), ScrollBarThickness=6,
                        ZIndex=1002, Parent=modal
                    })
                    local ll = new("UIListLayout",{Padding=UDim.new(0,8)}, listF)
                    ll:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                        listF.CanvasSize = UDim2.new(0,0,0, ll.AbsoluteContentSize.Y + 8)
                    end)

                    -- selection state
                    local selectedSet = {}
                    local function loadCurrent()
                        selectedSet = {}
                        if o.MultiSelection then
                            for _,v in ipairs(type(current)=="table" and current or {}) do selectedSet[tostring(v)]=true end
                        else
                            if current ~= nil then selectedSet[tostring(current)] = true end
                        end
                    end
                    loadCurrent()
                    local function normalized(str) return tostring(str or ""):lower() end

                    local function rebuild()
                        for _,c in ipairs(listF:GetChildren()) do if c:IsA("TextButton") then c:Destroy() end end
                        local q = normalized(search.Text)
                        for _,choice in ipairs(opts) do
                            local s = normalized(choice)
                            if q=="" or s:find(q,1,true) then
                                local b = new("TextButton",{
                                    Size=UDim2.new(1,0,0,34), BackgroundColor3 = THEME.card,
                                    TextColor3 = THEME.text, Font=Enum.Font.Gotham, TextSize=14,
                                    AutoButtonColor=false, Text=tostring(choice), ZIndex=1002, Parent=listF
                                })
                                new("UICorner",{CornerRadius=UDim.new(0,8)}, b)

                                local sel = selectedSet[tostring(choice)] == true
                                local grad
                                local function paintSelected(on)
                                    if on then
                                        b.TextColor3 = THEME.text
                                        b.BackgroundColor3 = THEME.accent
                                        if not grad then
                                            grad = new("UIGradient",{Rotation=90, Transparency=NumberSequence.new(0),
                                                Color = ColorSequence.new({
                                                    ColorSequenceKeypoint.new(0.0, THEME.gradA),
                                                    ColorSequenceKeypoint.new(0.5, THEME.accent),
                                                    ColorSequenceKeypoint.new(1.0, THEME.gradB),
                                                })
                                            }, b)
                                        end
                                        grad.Enabled = true
                                    else
                                        b.TextColor3 = THEME.text
                                        b.BackgroundColor3 = THEME.card
                                        if grad then grad.Enabled=false end
                                    end
                                end
                                paintSelected(sel)

                                b.MouseEnter:Connect(function() if not sel then tween(b,{BackgroundColor3=THEME.hover},0.12) end end)
                                b.MouseLeave:Connect(function() if not sel then tween(b,{BackgroundColor3=THEME.card},0.12) end end)
                                b.MouseButton1Click:Connect(function()
                                    if o.MultiSelection then
                                        sel = not sel
                                        if sel then selectedSet[tostring(choice)]=true else selectedSet[tostring(choice)]=nil end
                                        paintSelected(sel)
                                        local res = {}
                                        for _,ch in ipairs(opts) do if selectedSet[tostring(ch)] then table.insert(res, ch) end end
                                        current = res
                                        if flag then saveFlag(flag, current) scheduleFlush() end
                                        if o.Callback then pcall(o.Callback, res) end
                                    else
                                        for _,c2 in ipairs(listF:GetChildren()) do if c2:IsA("TextButton") then
                                            if c2 ~= b then
                                                c2.BackgroundColor3 = THEME.card
                                                local g = c2:FindFirstChildOfClass("UIGradient"); if g then g.Enabled=false end
                                            end
                                        end end
                                        sel = true; current = choice; paintSelected(true)
                                        if flag then saveFlag(flag, current) scheduleFlush() end
                                        if o.Callback then pcall(o.Callback, choice) end
                                        overlay:Destroy()
                                    end
                                end)
                            end
                        end
                    end

                    search:GetPropertyChangedSignal("Text"):Connect(rebuild)
                    rebuild()
                end

                header.MouseButton1Click:Connect(openPopup)

                local api = {
                    SetOptions = function(_, arr) opts = arr or {}; end,
                    Set = function(_, v) current = v; if flag then saveFlag(flag, v) scheduleFlush() end end,
                    Get = function() return current end,
                    Object = header
                }
                return attach(api)
            end

            function fold:AddSubFold(o)
                local sub = tab:CreateFold(o or {})
                if sub and sub._root then sub._root.Parent = body end
                resize(); return sub
            end

            function fold:_attach(inst) inst.Parent = body; resize() end

            return fold
        end

        return tab
    end

    return self
end

return IkanTongkol
